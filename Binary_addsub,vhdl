--Author : Kunjan Gevariya
--Roll No. : 1903116

---------------------------------------------------------------------------Q2-------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------Design code---------------------------------------------------

library IEEE;
use IEEE.std_logic_1164.all;

entity xor3 is
	port( a,b,c : in std_logic ; y : out std_logic );
end xor3;

architecture arch_xor3 of xor3 is
begin
	y <= a XOR b XOR c;
end arch_xor3;

library IEEE;
use IEEE.std_logic_1164.all;

entity and_gate is
	port( a,b : in std_logic ; y : out std_logic );
end and_gate;

architecture arch_and of and_gate is
begin
	y <= a AND b;
end arch_and;

library IEEE;
use IEEE.std_logic_1164.all;

entity or3 is
	port( a,b,c : in std_logic ; y : out std_logic );
end or3;

architecture arch_or3 of or3 is
begin
	y <= a OR b OR c;
end arch_or3;

library IEEE;
use IEEE.std_logic_1164.all;

entity full_adder is
	port( a,b,c_in : in std_logic ; s,c_out : out std_logic );
end full_adder;

architecture arch_fa of full_adder is
	component xor3 
		port( a,b,c : in std_logic ; y : out std_logic );
	end component;
	component and_gate
		port( a,b : in std_logic ; y : out std_logic );
	end component;
	component or3
		port( a,b,c : in std_logic ; y : out std_logic );
	end component;
	signal t : std_logic_vector(2 downto 0) := "000";
begin
	X0 : xor3 port map(a,b,c_in,s);
	A0 : and_gate port map(a,b,t(0));
	A1 : and_gate port map(b,c_in,t(1));
	A2 : and_gate port map(a,c_in,t(2));
	O0 : or3 port map(t(0),t(1),t(2),c_out);
end arch_fa;

library IEEE;
use IEEE.std_logic_1164.all;

entity ripple_adder is
	generic( N : integer );
	port( a,b : in std_logic_vector((N-1) downto 0) ; c_in : in std_logic ; s : out std_logic_vector((N-1) downto 0) ; c_out : out std_logic);
end ripple_adder;

architecture arch_ra of ripple_adder is
	component full_adder is
		port( a,b,c_in : in std_logic ; s,c_out : out std_logic );
	end component;
	signal carry : std_logic_vector(N-1 downto 0);
begin
	fa_array : for i in (N-1) downto 0 generate
		lowest_bit : if i=0 generate
			fa_0 : full_adder port map(a(0),b(0),c_in,s(0),carry(0));
		end generate lowest_bit;
		other_bit : if i/=0 generate
			fa_i : full_adder port map(a(i),b(i),carry(i-1),s(i),carry(i));
		end generate other_bit;
	end generate fa_array;
	c_out <= carry(N-1);
end arch_ra;


library IEEE;
use IEEE.std_logic_1164.all;

entity or_gate is
	port(a,b : in std_logic; y : out std_logic);
end or_gate;

architecture arch_or of or_gate is
begin
	y <= a OR b;
end arch_or;

library IEEE;
use IEEE.std_logic_1164.all;

entity not_gate is
	port(a : in std_logic; y : out std_logic);
end not_gate;

architecture arch_not of not_gate is
begin
	y <= NOT a;
end arch_not;

library IEEE;
use IEEE.std_logic_1164.all;

entity and3 is
	port( a,b,c : in std_logic ; y : out std_logic );
end and3;

architecture arch_and3 of and3 is
begin
	y <= a AND b AND c;
end arch_and3;

library IEEE;
use IEEE.std_logic_1164.all;

entity mux2x1 is
	generic(N : integer);
    port(a,b : in std_logic_vector(N-1 downto 0); s : in std_logic; y : out std_logic_vector(N-1 downto 0));
end mux2x1;

architecture arch_mux of mux2x1 is
    component and_gate is
    	port( a,b : in std_logic ; y : out std_logic );
    end component;
    component or_gate is
    	port(a,b : in std_logic; y : out std_logic);
    end component;
    component not_gate is
    	port(a : in std_logic; y : out std_logic);
    end component;
    signal not_s : std_logic := '0';
begin
    N0 : not_gate port map(s,not_s);
    output : for i in N-1 downto 0 generate
    signal or_in : std_logic_vector(1 downto 0) := "00";
    begin
        A0 : and_gate port map(a(i),not_s,or_in(0));
        A1 : and_gate port map(b(i),s,or_in(1));
        O0 : or_gate port map(or_in(0),or_in(1),y(i));
    end generate output;
end arch_mux;

library IEEE;
use IEEE.std_logic_1164.all;

entity add_sub is
	generic(N : integer);
    	port(A,B : in std_logic_vector(N-1 downto 0); op_sel : in std_logic; Y : out std_logic_vector(N-1 downto 0); c_out : out std_logic; OV : out std_logic);
end add_sub;

architecture arch_addsub of add_sub is
    component ripple_adder is
    	generic( N : integer );
	port( a,b : in std_logic_vector((N-1) downto 0) ; c_in : in std_logic ; s : out std_logic_vector((N-1) downto 0) ; c_out : out std_logic);
    end component;
    component mux2x1 is
    	generic(N : integer);
    	port(a,b : in std_logic_vector(N-1 downto 0); s : in std_logic; y : out std_logic_vector(N-1 downto 0));
    end component;
    component not_gate is
    	port(a : in std_logic; y : out std_logic);
    end component;
    component and3 is
    	port( a,b,c : in std_logic ; y : out std_logic );
    end component;
    component or_gate is
    	port(a,b : in std_logic; y : out std_logic);
    end component;
    signal not_B : std_logic_vector(N-1 downto 0);
    signal ri_inb : std_logic_vector(N-1 downto 0);
    signal cin_add : std_logic_vector(1 downto 0) := "00";
    signal cin_sub : std_logic_vector(1 downto 0) := "10";
    signal cin : std_logic_vector(1 downto 0) := "00";
    signal oi1,oi2,oi3,oi4,oi5 : std_logic := '0';
begin
    notb : for i in N-1 downto 0 generate
    N0 : not_gate port map(B(i),not_B(i));
    end generate notb;
    M0 : mux2x1 generic map(N) port map(B,not_B,op_sel,ri_inb);
    M1 : mux2x1 generic map(2) port map(cin_add,cin_sub,op_sel,cin);      --generic map(1) is not supported as we can not define std_logic_vector with only 1 bit
    R0 : ripple_adder generic map(N) port map(A,ri_inb,cin(1),Y,c_out);	  --So i have declared cin_add,cin_sub and cin as 2 bit vector but only 1st bit is important
    							  --2nd bit is ignored.
    OV_N0 : not_gate port map(Y(N-1),oi1);
    OV_N1 : not_gate port map(A(N-1),oi2);		--Overflow logic : when A(N-1) and ri_inb(N-1) (going into ripple adder) are same but Y(N-1) is different 
    OV_N2 : not_gate port map(ri_inb(N-1),oi3);		--that means overflow occured.
    OV_A0 : and3 port map(A(N-1),ri_inb(N-1),oi1,oi4);	--To detect this situation I have used OV =  a*b*c' + a'*b'*c where a=A(N-1), b=ri_inb(N-1),c=Y(N-1)
    OV_A1 : and3 port map(oi2,oi3,Y(N-1),oi5);
    OV_O0 : or_gate port map(oi4,oi5,OV);
end arch_addsub;

----------------------------------------------------------Testbench code---------------------------------------------------------
--Logic : Here I have initiated A and B as 1000 which means -8 (in signed 2's complement form). 
--Then I have increased A and then B by 1. That means it will cover all values that A can take with all values that B can take.
--Then I have changed op_sel to 1 so that it will perform A-B for all combinations of A and B.
--By setting run time = 5120 ns we can see both addition and subtraction for all input combinations. (For 4 bits vector)

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Testbench is
end Testbench;

architecture arch_test of Testbench is
	component add_sub is
		generic( N : integer );
		port(A,B : in std_logic_vector(N-1 downto 0); op_sel : in std_logic; Y : out std_logic_vector(N-1 downto 0); c_out : out std_logic; OV : out std_logic);
	end component;
	signal A,B,Y : std_logic_vector(3 downto 0) := "1000";
	signal op_sel,c_in,c_out,OV : std_logic := '0';
begin
	R0 : add_sub generic map(4) port map(A,B,op_sel,Y,c_out,OV);
	A <= std_logic_vector(signed(A)+1) after 10 ns;
	B <= std_logic_vector(signed(B)+1) after 160 ns;
    	op_sel <= not op_sel after 2560 ns;
end arch_test;
